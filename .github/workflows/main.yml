name: Build and Push Docker Image

on:
  push:
    branches:
      - main   
  pull_request:
    branches:
      - main
jobs: 
  build:
    runs-on: ubuntu-latest
    steps:

      # Paso 1: Checkout del repositorio
      - name: Checkout repository
        uses: actions/checkout@v3

      # Paso 2: Configurar Java
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Paso 3: Compilar el JAR
      - name: Build with Maven
        run: mvn clean package -DskipTests

      # Paso 4: Autenticar en DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Paso 5: Construir la imagen de Docker
      - name: Build Docker Image
        run: |
          docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }} .
          docker tag ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }} ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest

      # Paso 6: Hacer push de la imagen a DockerHub
      - name: Push Docker Image
        run: |
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/my-app:latest
          
      # Paso 7: Configurar credenciales de AWS para SSH, incluyendo AWS_SESSION_TOKEN
      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # Cambia a tu región
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}

      # Paso 8: Agregar clave SSH
      - name: Add SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa

      # Paso 9: Conectarse a EC2 y desplegar con Docker Compose
      - name: Deploy to EC2 with Docker Compose
        run: |
          ssh -T -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.USER_SERVER }}@${{ secrets.EC2_HOST }} << 'EOF'
            echo "Iniciando despliegue en EC2..."

            # Instalar git si no está presente
            if ! command -v git &> /dev/null
            then
                echo "Git no encontrado. Instalando Git..."
                sudo yum update -y
                sudo yum install git -y
            fi
            echo "Git verificado/instalado."

            # Instalar Docker Compose si no está presente
            if ! command -v docker-compose &> /dev/null
            then
                echo "Docker Compose no encontrado. Instalando Docker Compose..."
                sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
                sudo chmod +x /usr/local/bin/docker-compose
            fi
            echo "Docker Compose verificado/instalado."

            # Elimina el directorio antiguo para asegurar un clonado limpio
            echo "Eliminando directorio 'facturas' antiguo si existe..."
            rm -rf facturas
            echo "Clonando una copia fresca del repositorio..."
            git clone https://github.com/${{ github.repository }}.git facturas
            cd facturas
            echo "En directorio: $(pwd)"
            
            # Exporta el nombre de la imagen como una variable de entorno
            export DOCKER_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/my-app:${{ github.sha }}
            echo "DOCKER_IMAGE: $DOCKER_IMAGE"
            
            # Inicia sesión en DockerHub
            echo "Iniciando sesión en DockerHub..."
            echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
            echo "Sesión en DockerHub iniciada."
            
            # Detiene y elimina los servicios existentes para asegurar un despliegue limpio
            echo "Deteniendo y eliminando contenedores antiguos si existen..."
            docker stop facturas-app rabbitmq || true
            docker rm facturas-app rabbitmq || true
            echo "Contenedores antiguos detenidos y eliminados."

            # Asegurarse de que el puerto 8080 esté libre en el host
            echo "Verificando y liberando el puerto 8080 en el host..."
            sudo lsof -t -i:8080 | xargs -r sudo kill -9
            echo "Puerto 8080 liberado."

            echo "Deteniendo y eliminando servicios con Docker Compose..."
            docker-compose down -v --remove-orphans
            echo "Servicios existentes eliminados."

            # Descarga la última versión de la imagen de la aplicación desde Docker Hub
            echo "Descargando imagen de Docker..."
            docker pull ${DOCKER_IMAGE}
            echo "Imagen de Docker descargada."
            
            # Verificar que la imagen se descargó correctamente
            echo "Verificando imágenes disponibles:"
            docker images | grep my-app
            
            # Crear archivo .env para docker-compose
            echo "Creando archivo .env con las variables de entorno..."
            echo "DOCKER_IMAGE=${DOCKER_IMAGE}" > .env
            echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env
            echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env
            echo "AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}" >> .env
            echo "AWS_REGION=us-east-1" >> .env
            echo "Archivo .env creado."
            # No imprimimos el contenido para no exponer secretos en los logs
            
            # Levanta los servicios. --force-recreate asegura que el contenedor de la app se actualice.
            echo "Levantando servicios con Docker Compose..."
            docker-compose up -d --force-recreate
            echo "Servicios levantados."
            
            # Verificar el estado de los contenedores
            echo "Estado de los contenedores:"
            docker ps -a
            
            # Verificar logs del contenedor de la aplicación
            echo "Logs del contenedor facturas-app:"
            docker logs facturas-app --tail 20
          EOF
